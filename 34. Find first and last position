Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.
Your algorithm's runtime complexity must be in the order of O(log n).
If the target is not found in the array, return [-1, -1].

"""
There is also a solution to use three binary search.
What is important is find the most left side of the target after you have applyed a binary search method.
Ex [1,2,8,8,8,8,8,8,8,8,8,9] you have find 8 and separate the list as [1,2,8,8,8], [8,8,8,8,8,9]
how to find the left one and right one.
just modify the binary search's selection condition.
Normally, we use binary search to find the target value because nums[mid] == target
now we must find the left side of [1,2,8,8,8] with target 8, what is charateristic of the left 8?
That is: after we discard the left are without 8, then mid will refer 8, if nums[mid-1] < target! Bingo! mid is what we want
then we shrink the feasible scale and return left, when right and left refer same position
"""

#This one is only fake binary search
class Solution:
    def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        
        if nums == []:
            return [-1, -1]
        low = 0
        high = len(nums) - 1
        find_or_not = 0
 #firstly, find that target position with binary search
        while low <=high:
            mid = low+(high-low)//2
            if nums[mid] == target:
                possible = mid
                find_or_not =1
                break
            elif nums[mid] > target:
                high = mid-1
            else:
                low = mid+1
     # don't find target in lists
        if find_or_not == 0:
            return [-1, -1]
    # from possible position to front and back to find the same value and move the head and last index value
        possible_head = possible
        possible_last = possible
        while nums[possible_head]==target:
            possible_head -= 1
            if possible_head == -1:
                break
        while nums[possible_last]==target:
            possible_last += 1
            if possible_last == len(nums):
                break
        return [possible_head+1, possible_last-1]
